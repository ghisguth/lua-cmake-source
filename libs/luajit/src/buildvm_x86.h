/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.2.1, DynASM x86 version 1.2.1
** DO NOT EDIT! The original file is in "buildvm_x86.dasc".
*/

#if DASM_VERSION != 10201
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[12326] = {
  254,1,248,10,137,202,139,173,233,137,114,252,252,15,182,141,233,139,181,233,
  139,189,233,139,108,36,48,141,12,202,141,68,194,252,252,59,141,233,15,135,
  244,11,248,9,189,237,248,1,137,40,137,104,8,131,192,16,57,200,15,130,244,
  1,255,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  12,137,113,252,252,141,52,197,237,141,148,253,49,233,137,106,252,248,139,
  173,233,137,114,252,252,15,182,181,233,141,60,252,242,139,116,36,48,141,66,
  4,59,190,233,15,135,244,13,15,182,181,233,133,252,246,15,132,244,248,248,
  1,131,193,8,57,209,15,131,244,248,139,121,252,248,137,120,252,252,139,121,
  252,252,137,56,131,192,8,199,65,252,252,237,131,252,238,1,15,133,244,1,248,
  2,15,182,141,233,139,181,233,139,189,233,141,12,202,252,233,244,9,248,14,
  255,137,113,252,252,139,189,233,139,108,36,48,141,68,193,252,248,137,141,
  233,141,136,233,137,124,36,4,137,44,36,137,133,233,59,141,233,15,135,244,
  15,199,131,233,237,252,255,147,233,199,131,233,237,139,149,233,141,12,194,
  252,247,217,3,141,233,248,16,131,192,1,137,68,36,20,252,247,198,237,15,132,
  244,17,252,233,244,18,248,19,137,113,252,252,139,189,233,139,108,36,48,141,
  68,193,252,248,137,141,233,255,141,136,233,137,44,36,137,133,233,59,141,233,
  15,135,244,15,199,131,233,237,252,255,215,199,131,233,237,139,149,233,141,
  12,194,252,247,217,3,141,233,248,16,131,192,1,137,68,36,20,252,247,198,237,
  15,132,244,17,248,18,252,247,198,237,15,132,244,20,199,131,233,237,131,230,
  252,248,41,214,252,247,222,131,232,1,15,132,244,248,248,1,255,139,44,10,137,
  106,252,248,139,108,10,4,137,106,252,252,131,194,8,131,232,1,15,133,244,1,
  248,2,139,108,36,48,137,181,233,248,3,139,68,36,20,139,76,36,56,248,4,57,
  193,15,133,244,252,248,5,131,252,234,8,137,149,233,248,21,139,76,36,52,137,
  141,233,49,192,248,22,131,196,28,91,94,95,93,195,248,6,15,130,244,253,59,
  149,233,15,135,244,254,199,66,252,252,237,131,194,8,131,192,1,252,233,244,
  4,248,7,255,133,201,15,132,244,5,41,193,141,20,202,252,233,244,5,248,8,137,
  149,233,137,68,36,20,137,76,36,4,137,44,36,232,251,1,0,139,149,233,252,233,
  244,3,248,23,139,76,36,4,139,68,36,8,129,225,239,137,204,139,108,36,48,139,
  173,233,199,133,233,237,252,233,244,22,248,24,139,76,36,4,129,225,239,137,
  204,139,108,36,48,185,252,248,252,255,252,255,252,255,184,237,139,149,233,
  139,157,233,129,195,239,139,114,252,252,199,66,252,252,237,255,199,131,233,
  237,252,233,244,16,248,20,252,247,198,237,15,132,244,25,131,230,252,248,41,
  252,242,141,76,49,252,248,139,114,252,252,199,68,10,4,237,252,233,244,16,
  248,15,199,68,36,4,237,252,233,244,247,248,13,131,232,8,137,202,137,252,249,
  139,181,233,139,108,36,48,248,11,131,232,4,41,209,193,252,233,3,131,198,4,
  137,149,233,137,133,233,137,116,36,24,137,76,36,4,137,44,36,248,1,232,251,
  1,0,139,141,233,139,133,233,255,139,105,252,248,139,113,252,252,41,200,193,
  232,3,131,192,1,252,255,165,233,248,26,85,87,86,83,190,237,131,252,236,28,
  49,192,139,108,36,48,141,188,253,36,233,139,76,36,52,139,157,233,129,195,
  239,137,189,233,137,68,36,52,137,68,36,24,56,133,233,15,132,244,249,199,131,
  233,237,136,133,233,139,149,233,139,133,233,41,200,193,232,3,131,192,1,41,
  209,139,114,252,252,137,68,36,20,252,247,198,237,15,132,244,17,252,233,244,
  18,248,27,85,87,86,83,190,237,252,233,244,247,248,28,255,85,87,86,83,190,
  237,248,1,131,252,236,28,139,108,36,48,139,76,36,52,248,2,139,189,233,137,
  124,36,52,137,100,36,24,137,165,233,139,157,233,129,195,239,248,3,199,131,
  233,237,139,149,233,1,206,41,214,139,133,233,41,200,193,232,3,131,192,1,139,
  105,252,248,129,121,253,252,252,239,15,133,244,29,252,255,165,233,248,30,
  85,87,86,83,131,252,236,28,139,108,36,48,139,68,36,60,139,76,36,56,139,84,
  36,52,137,100,36,24,139,189,233,43,189,233,199,68,36,60,0,0,0,0,137,124,36,
  56,137,68,36,8,137,76,36,4,137,44,36,139,189,233,137,124,36,52,137,165,233,
  252,255,210,133,192,15,132,244,21,255,137,193,190,237,252,233,244,2,248,25,
  1,209,131,230,252,248,137,213,41,252,242,199,68,193,252,252,237,137,200,139,
  117,252,244,139,122,252,248,139,191,233,139,191,233,252,255,101,252,240,248,
  31,15,182,78,252,255,131,252,237,16,141,12,202,41,252,233,15,132,244,32,252,
  247,217,193,252,233,3,137,76,36,8,139,72,4,139,0,137,77,4,137,69,0,137,108,
  36,4,252,233,244,33,248,34,137,68,36,16,199,68,36,20,237,141,68,36,16,128,
  126,252,252,235,15,133,244,247,141,139,233,137,41,199,65,4,237,137,205,252,
  233,244,248,248,35,15,182,70,252,254,137,68,36,12,219,68,36,12,221,92,36,
  16,141,68,36,16,252,233,244,247,248,36,255,15,182,70,252,254,141,4,194,248,
  1,15,182,110,252,255,141,44,252,234,248,2,137,108,36,4,139,108,36,48,137,
  68,36,8,137,44,36,137,116,36,24,137,149,233,232,251,1,1,139,149,233,133,192,
  15,132,244,249,248,32,15,182,78,252,253,139,104,4,139,0,137,108,202,4,137,
  4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  3,139,141,233,137,113,252,244,141,177,233,41,214,139,105,252,248,184,3,0,
  0,0,252,255,165,233,248,37,137,68,36,16,199,68,36,20,237,141,68,36,16,128,
  126,252,252,235,15,133,244,247,141,139,233,137,41,199,65,4,237,137,205,252,
  233,244,248,248,38,15,182,70,252,254,137,68,36,12,219,68,36,12,221,92,36,
  16,141,68,36,16,252,233,244,247,248,39,255,15,182,70,252,254,141,4,194,248,
  1,15,182,110,252,255,141,44,252,234,248,2,137,108,36,4,139,108,36,48,137,
  68,36,8,137,44,36,137,116,36,24,137,149,233,232,251,1,2,139,149,233,133,192,
  15,132,244,249,15,182,78,252,253,139,108,202,4,139,12,202,137,104,4,137,8,
  248,40,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  3,139,141,233,137,113,252,244,15,182,70,252,253,139,108,194,4,139,4,194,137,
  105,20,137,65,16,141,177,233,41,214,139,105,252,248,184,4,0,0,0,252,255,165,
  233,248,41,15,182,110,252,252,141,4,194,141,12,202,137,108,36,12,139,108,
  36,48,137,68,36,8,137,76,36,4,137,44,36,137,116,36,24,137,149,233,232,251,
  1,3,248,3,139,149,233,131,252,248,1,15,135,244,42,248,4,141,118,4,15,130,
  244,252,248,5,15,183,70,252,254,141,180,253,134,233,248,6,255,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,43,131,198,4,129,120,
  253,4,239,15,130,244,5,252,233,244,6,248,44,129,120,253,4,239,252,233,244,
  4,248,45,137,108,36,12,139,108,36,48,131,252,238,4,137,68,36,8,137,76,36,
  4,137,44,36,137,116,36,24,137,149,233,232,251,1,4,252,233,244,3,248,46,141,
  4,199,252,233,244,247,248,47,141,4,199,141,44,252,234,149,252,233,244,248,
  248,48,141,4,194,137,197,252,233,244,248,248,49,255,141,4,194,248,1,141,44,
  252,234,248,2,141,12,202,137,108,36,8,139,108,36,48,137,68,36,12,15,182,70,
  252,252,137,76,36,4,137,68,36,16,137,44,36,137,116,36,24,137,149,233,232,
  251,1,5,139,149,233,133,192,15,132,244,40,248,42,137,193,41,208,137,113,252,
  244,141,176,233,139,105,252,248,184,3,0,0,0,129,121,253,252,252,239,15,133,
  244,29,252,255,165,233,248,50,141,4,194,139,108,36,48,137,68,36,4,137,44,
  36,137,116,36,24,137,149,233,232,251,1,6,139,149,233,252,233,244,42,248,29,
  137,76,36,12,137,68,36,16,131,252,233,8,141,4,193,139,108,36,48,137,76,36,
  4,137,68,36,8,137,44,36,137,116,36,24,137,149,233,232,251,1,7,139,149,233,
  139,76,36,12,139,68,36,16,139,105,252,248,131,192,1,57,215,15,132,244,51,
  252,255,165,233,248,52,255,139,108,36,48,137,76,36,4,137,44,36,137,116,36,
  24,137,149,233,232,251,1,8,139,149,233,139,70,252,252,15,182,204,15,182,232,
  193,232,16,252,255,164,253,171,233,248,53,129,252,248,239,15,130,244,54,139,
  105,4,129,252,253,239,15,131,244,54,137,68,36,20,137,105,252,252,139,41,137,
  105,252,248,131,232,2,15,132,244,248,137,12,36,248,1,131,193,8,139,105,4,
  137,105,252,252,139,41,137,105,252,248,131,232,1,15,133,244,1,139,12,36,248,
  2,139,68,36,20,252,233,244,55,248,56,129,252,248,239,15,130,244,54,139,105,
  4,184,237,255,252,247,213,57,232,255,15,71,197,255,15,134,244,247,137,232,
  248,1,255,139,105,252,248,139,132,253,197,233,199,65,252,252,237,137,65,252,
  248,252,233,244,57,248,58,129,252,248,239,15,130,244,54,139,105,4,129,252,
  253,239,15,133,244,252,248,1,139,41,139,173,233,248,2,133,252,237,199,65,
  252,252,237,15,132,244,57,139,65,252,248,139,131,233,199,65,252,252,237,137,
  105,252,248,137,12,36,139,141,233,35,136,233,105,201,239,3,141,233,248,3,
  255,129,185,233,239,15,133,244,250,57,129,233,15,132,244,251,248,4,139,137,
  233,133,201,15,133,244,3,252,233,244,57,248,5,139,105,4,129,252,253,239,15,
  132,244,57,139,1,139,12,36,137,105,252,252,137,65,252,248,252,233,244,57,
  248,6,129,252,253,239,15,132,244,1,255,129,252,253,239,15,135,244,253,189,
  237,248,7,252,247,213,139,172,253,171,233,252,233,244,2,248,59,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,133,244,54,139,41,131,189,233,0,15,
  133,244,54,129,121,253,12,239,15,133,244,54,139,65,8,137,133,233,199,65,252,
  252,237,255,137,105,252,248,252,246,133,233,235,15,132,244,247,128,165,233,
  235,139,131,233,137,171,233,137,133,233,248,1,252,233,244,57,248,60,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,133,244,54,139,1,139,108,36,48,
  137,68,36,4,137,44,36,137,205,137,84,36,12,131,193,8,137,76,36,8,232,251,
  1,9,137,252,233,139,84,36,12,139,40,139,64,4,137,105,252,248,137,65,252,252,
  252,233,244,57,248,61,129,252,248,239,255,15,133,244,54,129,121,253,4,239,
  15,135,244,54,221,1,252,233,244,62,248,63,129,252,248,239,15,130,244,54,129,
  121,253,4,239,15,133,244,249,139,1,248,2,199,65,252,252,237,137,65,252,248,
  252,233,244,57,248,3,129,121,253,4,239,15,135,244,54,131,187,233,0,255,15,
  133,244,54,139,171,233,59,171,233,15,130,244,247,232,244,64,248,1,139,108,
  36,48,137,44,36,137,76,36,4,137,141,233,137,113,252,252,137,116,36,24,137,
  84,36,8,232,251,1,10,139,141,233,139,84,36,8,252,233,244,2,248,65,129,252,
  248,239,15,130,244,54,15,132,244,248,248,1,129,121,253,4,239,15,133,244,54,
  255,139,41,137,108,36,4,139,108,36,48,137,44,36,137,141,233,137,113,252,252,
  137,116,36,24,137,84,36,12,131,193,8,137,76,36,8,232,251,1,11,139,141,233,
  139,84,36,12,133,192,15,132,244,249,139,105,8,139,65,12,137,105,252,248,137,
  65,252,252,139,105,16,139,65,20,137,41,137,65,4,248,66,184,237,252,233,244,
  67,248,2,199,65,12,237,252,233,244,1,248,3,199,65,252,252,237,252,233,244,
  57,248,68,129,252,248,239,15,130,244,54,129,121,253,4,239,15,133,244,54,255,
  139,133,233,199,65,252,252,237,137,65,252,248,199,65,12,237,184,237,252,233,
  244,67,248,69,129,252,248,239,15,130,244,54,129,121,253,4,239,15,133,244,
  54,129,121,253,12,239,15,135,244,54,221,65,8,217,232,222,193,219,84,36,4,
  221,89,252,248,139,41,139,68,36,4,59,133,233,15,131,244,248,193,224,3,3,133,
  233,248,1,129,120,253,4,239,15,132,244,70,255,139,40,139,64,4,137,41,137,
  65,4,252,233,244,66,248,2,131,189,233,0,15,132,244,70,137,44,36,137,84,36,
  8,137,205,232,251,1,12,137,252,233,139,84,36,8,133,192,15,133,244,1,248,70,
  184,237,252,233,244,67,248,71,129,252,248,239,15,130,244,54,129,121,253,4,
  239,15,133,244,54,139,133,233,199,65,252,252,237,137,65,252,248,217,252,238,
  221,89,8,184,237,252,233,244,67,248,72,255,129,252,248,239,15,130,244,54,
  137,113,252,252,190,237,137,202,131,193,8,131,232,1,139,105,252,248,248,1,
  252,246,131,233,235,15,133,244,249,248,2,129,121,253,252,252,239,15,133,244,
  29,252,255,165,233,248,3,131,198,1,252,233,244,2,248,73,129,252,248,239,15,
  130,244,54,129,121,253,12,239,15,133,244,54,255,137,113,252,252,139,105,4,
  137,105,12,199,65,4,237,139,41,139,113,8,137,105,8,137,49,190,237,137,202,
  129,193,239,131,232,2,252,233,244,1,248,9,139,116,36,24,252,233,244,54,248,
  74,129,252,248,239,15,130,244,54,139,41,137,113,252,252,137,116,36,24,137,
  44,36,129,121,253,4,239,15,133,244,9,131,189,233,0,15,133,244,9,128,189,233,
  235,15,135,244,9,139,181,233,255,137,116,36,4,15,132,244,247,59,181,233,15,
  132,244,9,248,1,141,116,198,252,240,59,181,233,15,135,244,9,137,181,233,139,
  108,36,48,137,141,233,131,193,8,137,141,233,139,108,36,4,141,76,193,232,41,
  252,241,57,252,238,15,132,244,249,248,2,139,68,14,4,137,70,252,252,139,4,
  14,137,70,252,248,131,252,238,8,57,252,238,15,133,244,2,248,3,49,201,137,
  76,36,12,137,76,36,8,232,244,26,199,131,233,237,139,108,36,48,139,52,36,139,
  149,233,255,129,252,248,239,15,135,244,254,248,4,139,142,233,139,190,233,
  137,142,233,137,252,254,41,206,15,132,244,252,141,4,50,193,252,238,3,59,133,
  233,15,135,244,255,137,213,41,205,248,5,139,1,137,4,41,139,65,4,137,68,41,
  4,131,193,8,57,252,249,15,133,244,5,248,6,141,70,2,199,66,252,252,237,248,
  7,139,116,36,24,137,68,36,20,185,252,248,252,255,252,255,252,255,252,247,
  198,237,15,132,244,17,252,233,244,18,248,8,255,199,66,252,252,237,139,142,
  233,131,252,233,8,137,142,233,139,1,137,2,139,65,4,137,66,4,184,237,252,233,
  244,7,248,9,139,12,36,137,185,233,137,116,36,4,137,44,36,232,251,1,0,139,
  149,233,252,233,244,4,248,9,139,116,36,24,252,233,244,54,248,75,139,173,233,
  137,113,252,252,137,116,36,24,137,44,36,131,189,233,0,15,133,244,9,128,189,
  233,235,15,135,244,9,255,139,181,233,137,116,36,4,15,132,244,247,59,181,233,
  15,132,244,9,248,1,141,116,198,252,248,59,181,233,15,135,244,9,137,181,233,
  139,108,36,48,137,141,233,137,141,233,139,108,36,4,141,76,193,252,240,41,
  252,241,57,252,238,15,132,244,249,248,2,139,68,14,4,137,70,252,252,139,4,
  14,137,70,252,248,131,252,238,8,57,252,238,15,133,244,2,248,3,49,201,137,
  76,36,12,137,76,36,8,232,244,26,199,131,233,237,255,139,108,36,48,139,52,
  36,139,149,233,129,252,248,239,15,135,244,254,248,4,139,142,233,139,190,233,
  137,142,233,137,252,254,41,206,15,132,244,252,141,4,50,193,252,238,3,59,133,
  233,15,135,244,255,137,213,41,205,248,5,139,1,137,4,41,139,65,4,137,68,41,
  4,131,193,8,57,252,249,15,133,244,5,248,6,141,70,1,248,7,139,116,36,24,137,
  68,36,20,49,201,252,247,198,237,15,132,244,17,252,233,244,18,248,8,255,137,
  116,36,4,137,44,36,232,251,1,13,248,9,139,12,36,137,185,233,137,116,36,4,
  137,44,36,232,251,1,0,139,149,233,252,233,244,4,248,76,139,108,36,48,137,
  113,252,252,252,247,133,233,237,15,132,244,54,137,141,233,141,68,193,252,
  248,137,133,233,49,192,137,133,233,176,235,136,133,233,252,233,244,22,248,
  77,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,255,221,
  1,217,225,248,62,221,89,252,248,248,57,184,237,248,67,137,68,36,20,248,55,
  252,247,198,237,15,133,244,253,248,5,56,70,252,255,15,135,244,252,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,6,199,68,193,252,
  244,237,131,192,1,252,233,244,5,248,7,137,202,185,252,248,252,255,252,255,
  252,255,252,233,244,18,248,78,129,252,248,239,15,130,244,54,129,121,253,4,
  239,255,15,135,244,54,221,1,232,244,79,252,233,244,62,248,80,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,232,244,81,252,233,
  244,62,248,82,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,255,221,1,217,252,250,252,233,244,62,248,83,129,252,248,239,15,130,244,
  54,129,121,253,4,239,15,135,244,54,217,252,237,221,1,217,252,241,252,233,
  244,62,248,84,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,217,252,236,221,1,217,252,241,252,233,244,62,248,85,129,252,248,239,15,
  130,244,54,255,129,121,253,4,239,15,135,244,54,221,1,232,244,86,252,233,244,
  62,248,87,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,
  1,217,252,254,252,233,244,62,248,88,129,252,248,239,15,130,244,54,129,121,
  253,4,239,15,135,244,54,255,221,1,217,252,255,252,233,244,62,248,89,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,217,252,242,221,
  216,252,233,244,62,248,90,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,221,1,217,192,216,200,217,232,222,225,217,252,250,217,252,243,
  252,233,244,62,248,91,129,252,248,239,15,130,244,54,255,129,121,253,4,239,
  15,135,244,54,221,1,217,192,216,200,217,232,222,225,217,252,250,217,201,217,
  252,243,252,233,244,62,248,92,129,252,248,239,15,130,244,54,129,121,253,4,
  239,15,135,244,54,221,1,217,232,217,252,243,252,233,244,62,248,93,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,137,76,36,16,
  221,28,36,137,213,232,251,1,14,139,76,36,16,137,252,234,252,233,244,62,248,
  94,255,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,
  1,137,76,36,16,221,28,36,137,213,232,251,1,15,139,76,36,16,137,252,234,252,
  233,244,62,248,95,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,221,1,137,76,36,16,221,28,36,137,213,232,251,1,16,139,76,36,16,137,
  252,234,252,233,244,62,248,96,248,97,129,252,248,239,15,130,244,54,129,121,
  253,4,239,255,15,135,244,54,221,1,220,141,233,252,233,244,62,248,98,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,
  15,135,244,54,221,1,221,65,8,217,252,243,252,233,244,62,248,99,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,255,129,121,253,12,239,
  15,135,244,54,221,65,8,221,1,217,252,253,221,217,252,233,244,62,248,100,129,
  252,248,239,15,130,244,54,139,105,4,129,252,253,239,15,135,244,54,139,1,137,
  105,252,252,137,65,252,248,209,229,129,252,253,0,0,224,252,255,15,131,244,
  249,9,232,15,132,244,249,184,252,254,3,0,0,129,252,253,0,0,32,0,15,130,244,
  250,248,1,193,252,237,21,41,197,137,44,36,219,4,36,139,105,252,252,129,229,
  252,255,252,255,15,128,129,205,0,0,224,63,137,105,252,252,248,2,221,25,184,
  237,252,233,244,67,248,3,255,217,252,238,252,233,244,2,248,4,221,1,199,4,
  36,0,0,128,90,216,12,36,221,89,252,248,139,105,252,252,184,52,4,0,0,209,229,
  252,233,244,1,248,101,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,221,1,139,105,4,209,229,129,252,253,0,0,224,252,255,15,132,244,
  250,217,192,232,244,102,220,252,233,248,1,221,89,252,248,221,25,139,65,252,
  252,139,105,4,49,232,15,136,244,249,248,2,184,237,252,233,244,67,248,3,255,
  129,252,245,0,0,0,128,137,105,4,252,233,244,2,248,4,217,252,238,217,201,252,
  233,244,1,248,103,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,129,121,253,12,239,15,135,244,54,221,65,8,221,1,248,1,217,252,248,
  223,224,158,15,138,244,1,221,217,252,233,244,62,248,104,129,252,248,239,15,
  130,244,54,255,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,
  244,54,221,1,221,65,8,232,244,105,252,233,244,62,248,106,129,252,248,239,
  15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,189,2,0,0,0,248,1,57,
  197,15,131,244,62,129,124,253,252,233,252,252,239,15,135,244,251,255,221,
  68,252,233,252,248,255,219,252,233,219,209,221,217,255,80,221,225,223,224,
  252,246,196,1,15,132,244,248,217,201,248,2,221,216,88,255,131,197,1,252,233,
  244,1,248,107,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,221,1,189,2,0,0,0,248,1,57,197,15,131,244,62,129,124,253,252,233,252,252,
  239,15,135,244,251,221,68,252,233,252,248,255,219,252,233,218,209,221,217,
  255,80,221,225,223,224,252,246,196,1,15,133,244,248,217,201,248,2,221,216,
  88,255,131,197,1,252,233,244,1,248,5,221,216,252,233,244,54,248,108,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,133,244,54,139,41,219,133,233,
  252,233,244,62,248,109,129,252,248,239,15,133,244,54,129,121,253,4,239,15,
  133,244,54,139,41,131,189,233,1,255,15,130,244,70,15,182,173,233,137,44,36,
  219,4,36,252,233,244,62,248,110,139,171,233,59,171,233,15,130,244,247,232,
  244,64,248,1,129,252,248,239,15,133,244,54,129,121,253,4,239,15,135,244,54,
  221,1,219,92,36,12,129,124,36,12,252,255,0,0,0,15,135,244,54,141,68,36,12,
  137,76,36,16,199,68,36,8,1,0,0,0,137,68,36,4,248,111,139,108,36,48,137,44,
  36,137,116,36,24,137,149,233,255,232,251,1,17,139,76,36,16,139,149,233,199,
  65,252,252,237,137,65,252,248,252,233,244,57,248,112,139,171,233,59,171,233,
  15,130,244,247,232,244,64,248,1,137,76,36,16,199,68,36,12,252,255,252,255,
  252,255,252,255,129,252,248,239,15,130,244,54,15,134,244,247,129,121,253,
  20,239,15,135,244,54,221,65,16,219,92,36,12,248,1,129,121,253,4,239,15,133,
  244,54,255,129,121,253,12,239,15,135,244,54,139,41,137,108,36,4,139,173,233,
  221,65,8,219,92,36,8,139,68,36,12,57,197,15,130,244,251,248,2,139,76,36,8,
  133,201,15,142,244,253,248,3,139,108,36,4,41,200,15,140,244,113,141,172,253,
  13,233,131,192,1,248,4,137,108,36,4,137,68,36,8,252,233,244,111,248,5,15,
  140,244,252,141,68,40,1,252,233,244,2,248,6,137,232,252,233,244,2,248,7,255,
  15,132,244,254,1,252,233,131,193,1,15,143,244,3,248,8,185,1,0,0,0,252,233,
  244,3,248,113,49,192,252,233,244,4,248,114,129,252,248,239,15,130,244,54,
  139,171,233,59,171,233,15,130,244,247,232,244,64,248,1,137,76,36,16,129,121,
  253,4,239,15,133,244,54,255,129,121,253,12,239,15,135,244,54,139,41,221,65,
  8,219,92,36,12,139,68,36,12,133,192,15,142,244,113,131,189,233,1,15,130,244,
  113,15,133,244,115,57,131,233,15,130,244,115,15,182,141,233,139,171,233,137,
  68,36,8,137,108,36,4,248,1,136,77,0,131,197,1,131,232,1,15,133,244,1,252,
  233,244,111,248,116,129,252,248,239,15,130,244,54,255,139,171,233,59,171,
  233,15,130,244,247,232,244,64,248,1,137,76,36,16,129,121,253,4,239,15,133,
  244,54,139,41,139,133,233,133,192,15,132,244,113,57,131,233,15,130,244,117,
  129,197,239,137,116,36,12,137,68,36,8,139,179,233,137,116,36,4,248,1,15,182,
  77,0,131,197,1,131,232,1,136,12,6,15,133,244,1,139,116,36,12,252,233,244,
  111,248,118,255,129,252,248,239,15,130,244,54,139,171,233,59,171,233,15,130,
  244,247,232,244,64,248,1,137,76,36,16,129,121,253,4,239,15,133,244,54,139,
  41,139,133,233,57,131,233,15,130,244,117,129,197,239,137,116,36,12,137,68,
  36,8,139,179,233,137,116,36,4,252,233,244,249,248,1,15,182,76,5,0,131,252,
  249,65,15,130,244,248,255,131,252,249,90,15,135,244,248,131,252,241,32,248,
  2,136,12,6,248,3,131,232,1,15,137,244,1,139,116,36,12,252,233,244,111,248,
  119,129,252,248,239,15,130,244,54,139,171,233,59,171,233,15,130,244,247,232,
  244,64,248,1,137,76,36,16,129,121,253,4,239,15,133,244,54,139,41,139,133,
  233,255,57,131,233,15,130,244,117,129,197,239,137,116,36,12,137,68,36,8,139,
  179,233,137,116,36,4,252,233,244,249,248,1,15,182,76,5,0,131,252,249,97,15,
  130,244,248,131,252,249,122,15,135,244,248,131,252,241,32,248,2,136,12,6,
  248,3,131,232,1,15,137,244,1,139,116,36,12,252,233,244,111,248,120,129,252,
  248,239,15,130,244,54,129,121,253,4,239,255,15,133,244,54,139,41,137,44,36,
  137,205,137,84,36,4,232,251,1,18,137,4,36,137,252,233,139,84,36,4,219,4,36,
  252,233,244,62,248,121,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,219,4,36,
  252,233,244,62,248,122,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,
  137,68,36,20,141,68,193,252,240,248,1,57,200,15,134,244,123,255,129,120,253,
  4,239,15,135,244,124,221,0,216,68,36,16,221,28,36,35,44,36,131,232,8,252,
  233,244,1,248,125,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,137,
  68,36,20,141,68,193,252,240,248,1,57,200,15,134,244,123,129,120,253,4,239,
  15,135,244,124,221,0,216,68,36,16,221,28,36,11,44,36,131,232,8,252,233,244,
  1,248,126,129,252,248,239,15,130,244,54,255,129,121,253,4,239,15,135,244,
  54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,137,68,
  36,20,141,68,193,252,240,248,1,57,200,15,134,244,123,129,120,253,4,239,15,
  135,244,124,221,0,216,68,36,16,221,28,36,51,44,36,131,232,8,252,233,244,1,
  248,127,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,
  1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,15,205,252,233,
  244,123,248,128,129,252,248,239,15,130,244,54,255,129,121,253,4,239,15,135,
  244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,252,
  247,213,248,123,137,44,36,219,4,36,252,233,244,62,248,124,139,68,36,20,252,
  233,244,54,248,129,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,129,121,253,12,239,15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,
  89,216,68,36,16,221,92,36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,
  44,36,211,229,137,193,252,233,244,123,248,130,129,252,248,239,255,15,130,
  244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,221,
  1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,16,221,92,36,8,216,68,36,16,
  221,28,36,137,200,139,76,36,8,139,44,36,211,252,237,137,193,252,233,244,123,
  248,131,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,
  121,253,12,239,15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,
  36,16,221,92,36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,211,
  252,253,137,193,252,233,244,123,248,132,255,129,252,248,239,15,130,244,54,
  129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,221,1,221,
  65,8,199,68,36,16,0,0,192,89,216,68,36,16,221,92,36,8,216,68,36,16,221,28,
  36,137,200,139,76,36,8,139,44,36,211,197,137,193,252,233,244,123,248,133,
  129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,
  12,239,15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,16,
  221,92,36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,211,205,
  137,193,252,233,244,123,248,115,255,184,237,252,233,244,54,248,117,184,237,
  248,54,139,108,36,48,41,202,137,113,252,252,137,116,36,24,137,84,36,8,137,
  141,233,141,68,193,252,248,137,44,36,141,144,233,137,133,233,139,73,252,248,
  59,149,233,15,135,244,251,252,255,145,233,133,192,15,133,244,249,248,1,139,
  141,233,139,133,233,41,200,193,232,3,131,192,1,139,105,252,248,139,84,36,
  8,1,202,57,113,252,252,15,133,244,248,252,255,165,233,248,2,129,121,253,252,
  252,239,255,15,133,244,29,252,255,165,233,248,3,139,141,233,139,84,36,8,1,
  202,252,233,244,67,248,5,199,68,36,4,237,232,251,1,0,252,233,244,1,248,64,
  93,137,108,36,8,139,108,36,48,41,202,137,84,36,4,137,113,252,252,137,116,
  36,24,137,141,233,141,68,193,252,248,137,44,36,137,133,233,232,251,1,19,139,
  141,233,139,133,233,41,200,193,232,3,131,192,1,139,113,252,252,139,84,36,
  4,1,202,139,108,36,8,85,139,105,252,248,195,248,134,255,15,182,131,233,168,
  235,15,133,244,251,168,235,15,133,244,247,168,235,15,132,244,247,252,255,
  139,233,252,233,244,247,255,248,135,15,182,131,233,168,235,15,133,244,251,
  168,235,15,132,244,251,252,255,139,233,15,132,244,247,168,235,15,132,244,
  251,248,1,139,108,36,48,139,68,36,20,137,68,36,8,137,149,233,137,116,36,4,
  137,44,36,232,251,1,20,248,4,139,149,233,15,182,78,252,253,248,5,15,182,110,
  252,252,15,183,70,252,254,252,255,164,253,171,233,248,136,255,139,108,36,
  48,141,139,233,137,116,36,4,137,12,36,137,171,233,137,116,36,24,137,149,233,
  232,251,1,21,252,233,244,4,255,248,137,255,139,108,36,48,141,139,233,137,
  116,36,4,137,12,36,137,171,233,137,116,36,24,137,149,233,232,251,1,21,139,
  149,233,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,
  248,138,255,85,141,108,36,12,85,83,82,81,80,15,182,69,252,252,138,101,252,
  248,137,125,252,252,137,117,252,248,139,93,0,139,139,233,199,131,233,237,
  137,131,233,137,139,233,129,252,236,239,252,247,131,233,237,15,132,244,247,
  252,242,15,17,125,216,252,242,15,17,117,208,252,242,15,17,109,200,252,242,
  15,17,101,192,252,242,15,17,93,184,252,242,15,17,85,176,252,242,15,17,77,
  168,252,242,15,17,69,160,248,1,139,171,233,139,147,233,137,171,233,141,68,
  36,16,137,149,233,141,139,233,137,68,36,4,137,12,36,232,251,1,22,137,196,
  139,149,233,139,116,36,24,137,108,36,48,255,248,139,255,139,122,252,248,139,
  191,233,139,191,233,199,131,233,0,0,0,0,199,131,233,237,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,248,79,217,124,36,4,137,
  68,36,8,102,184,0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,68,36,6,
  217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,248,81,217,124,36,4,
  137,68,36,8,102,184,0,8,102,11,68,36,4,102,37,252,255,252,251,102,137,68,
  36,6,217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,248,102,217,124,
  36,4,137,68,36,8,102,184,0,12,102,11,68,36,4,102,137,68,36,6,217,108,36,6,
  217,252,252,217,108,36,4,139,68,36,8,195,248,140,217,193,216,252,241,217,
  124,36,4,102,184,0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,68,36,
  6,217,108,36,6,217,252,252,217,108,36,4,222,201,222,252,233,195,248,86,217,
  252,234,222,201,248,141,217,84,36,4,129,124,36,4,0,0,128,127,15,132,244,247,
  129,124,36,4,0,0,128,252,255,15,132,244,248,248,142,217,192,217,252,252,220,
  252,233,217,201,217,252,240,217,232,222,193,217,252,253,221,217,248,1,195,
  248,2,221,216,217,252,238,195,248,105,219,84,36,4,219,68,36,4,255,223,252,
  233,255,80,221,252,233,223,224,158,88,255,15,133,244,254,15,138,244,255,221,
  216,248,143,80,139,68,36,8,131,252,248,1,15,142,244,252,248,1,169,1,0,0,0,
  15,133,244,248,216,200,209,232,252,233,244,1,248,2,209,232,15,132,244,251,
  217,192,248,3,216,200,209,232,15,132,244,250,15,131,244,3,220,201,252,233,
  244,3,248,4,255,222,201,248,5,88,195,248,6,15,132,244,5,15,130,244,253,217,
  232,222,252,241,252,247,216,131,252,248,1,15,132,244,5,252,233,244,1,248,
  7,221,216,217,232,88,195,248,8,80,217,84,36,8,217,201,217,84,36,12,139,68,
  36,8,209,224,61,0,0,0,252,255,15,132,244,248,139,68,36,12,209,224,15,132,
  244,250,61,0,0,0,252,255,15,132,244,250,88,217,252,241,252,233,244,142,248,
  9,217,232,255,223,252,234,255,80,221,252,234,223,224,158,88,255,15,132,244,
  247,217,201,248,1,221,216,195,248,2,217,225,217,232,255,221,252,233,223,224,
  158,255,15,132,244,249,221,216,217,225,217,252,238,184,0,0,0,0,15,146,208,
  209,200,51,68,36,8,15,137,244,249,217,201,248,3,221,217,217,225,88,195,248,
  4,131,124,36,8,0,15,141,244,3,221,216,221,216,133,192,88,15,132,244,251,217,
  252,238,195,248,5,199,68,36,8,0,0,128,127,217,68,36,8,195,248,144,139,68,
  36,12,221,68,36,4,131,252,248,1,15,130,244,79,15,132,244,81,131,252,248,3,
  15,130,244,102,15,135,244,247,217,252,250,195,248,1,131,252,248,5,15,130,
  244,86,255,15,132,244,141,131,252,248,7,15,132,244,247,15,135,244,248,217,
  252,237,217,201,217,252,241,195,248,1,217,232,217,201,217,252,241,195,248,
  2,131,252,248,9,15,132,244,247,15,135,244,248,217,252,236,217,201,217,252,
  241,195,248,1,217,252,254,195,248,2,131,252,248,11,15,132,244,247,15,135,
  244,255,217,252,255,195,248,1,217,252,242,221,216,195,248,9,204,248,145,139,
  68,36,20,221,68,36,4,221,68,36,12,131,252,248,1,15,132,244,247,255,15,135,
  244,248,222,193,195,248,1,222,252,233,195,248,2,131,252,248,3,15,132,244,
  247,15,135,244,248,222,201,195,248,1,222,252,249,195,248,2,131,252,248,5,
  15,130,244,140,15,132,244,105,131,252,248,7,15,132,244,247,15,135,244,248,
  221,216,217,224,195,248,1,221,216,217,225,195,248,2,131,252,248,9,15,132,
  244,247,15,135,244,248,255,217,252,243,195,248,1,217,201,217,252,253,221,
  217,195,248,2,131,252,248,11,15,132,244,247,15,135,244,255,255,219,252,233,
  219,209,221,217,195,248,1,219,252,233,218,209,221,217,195,255,221,225,223,
  224,252,246,196,1,15,132,244,248,217,201,248,2,221,216,195,248,1,221,225,
  223,224,252,246,196,1,15,133,244,248,217,201,248,2,221,216,195,255,248,9,
  204,248,146,156,90,137,209,129,252,242,0,0,32,0,82,157,156,90,49,192,57,209,
  15,132,244,247,139,68,36,4,87,83,15,162,139,124,36,16,137,7,137,95,4,137,
  79,8,137,87,12,91,95,248,1,195,255,249,255,129,124,253,202,4,239,15,135,244,
  41,129,124,253,194,4,239,15,135,244,41,221,4,202,221,4,194,131,198,4,255,
  223,252,233,221,216,255,218,252,233,223,224,158,255,15,134,244,248,255,15,
  131,244,248,255,248,1,15,183,70,252,254,141,180,253,134,233,248,2,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,108,194,4,
  131,198,4,129,252,253,239,15,135,244,251,129,124,253,202,4,239,15,135,244,
  251,221,4,202,221,4,194,255,15,138,244,248,15,133,244,248,255,15,138,244,
  248,15,132,244,247,255,248,1,15,183,70,252,254,141,180,253,134,233,248,2,
  255,248,2,15,183,70,252,254,141,180,253,134,233,248,1,255,248,5,57,108,202,
  4,15,133,244,2,129,252,253,239,15,131,244,1,139,12,202,139,4,194,57,193,15,
  132,244,1,129,252,253,239,15,135,244,2,139,169,233,133,252,237,15,132,244,
  2,252,246,133,233,235,15,133,244,2,255,49,252,237,255,189,1,0,0,0,255,252,
  233,244,45,255,252,247,208,131,198,4,129,124,253,202,4,239,15,133,244,248,
  139,12,202,59,12,135,255,131,198,4,129,124,253,202,4,239,15,135,244,248,221,
  4,202,221,4,199,255,252,247,208,131,198,4,57,68,202,4,255,139,108,194,4,131,
  198,4,129,252,253,239,255,15,131,244,247,255,15,130,244,247,255,137,108,202,
  4,139,44,194,137,44,202,255,15,183,70,252,254,141,180,253,134,233,248,1,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,108,194,
  4,139,4,194,137,108,202,4,137,4,202,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,171,255,49,252,237,129,124,253,194,4,239,129,213,239,
  137,108,202,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,255,129,124,253,194,4,239,15,135,244,48,221,4,194,217,224,221,28,202,
  139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,129,124,
  253,194,4,239,15,133,244,248,139,4,194,219,128,233,248,1,221,28,202,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,129,124,253,
  194,4,239,15,133,244,50,139,4,194,137,4,36,137,213,232,251,1,18,137,4,36,
  137,252,234,219,4,36,15,182,78,252,253,252,233,244,1,255,15,182,252,236,15,
  182,192,255,129,124,253,252,234,4,239,15,135,244,46,221,4,252,234,220,4,199,
  255,129,124,253,252,234,4,239,15,135,244,47,221,4,199,220,4,252,234,255,129,
  124,253,252,234,4,239,15,135,244,49,129,124,253,194,4,239,15,135,244,49,221,
  4,252,234,220,4,194,255,129,124,253,252,234,4,239,15,135,244,46,221,4,252,
  234,220,36,199,255,129,124,253,252,234,4,239,15,135,244,47,221,4,199,220,
  36,252,234,255,129,124,253,252,234,4,239,15,135,244,49,129,124,253,194,4,
  239,15,135,244,49,221,4,252,234,220,36,194,255,129,124,253,252,234,4,239,
  15,135,244,46,221,4,252,234,220,12,199,255,129,124,253,252,234,4,239,15,135,
  244,47,221,4,199,220,12,252,234,255,129,124,253,252,234,4,239,15,135,244,
  49,129,124,253,194,4,239,15,135,244,49,221,4,252,234,220,12,194,255,129,124,
  253,252,234,4,239,15,135,244,46,221,4,252,234,220,52,199,255,129,124,253,
  252,234,4,239,15,135,244,47,221,4,199,220,52,252,234,255,129,124,253,252,
  234,4,239,15,135,244,49,129,124,253,194,4,239,15,135,244,49,221,4,252,234,
  220,52,194,255,129,124,253,252,234,4,239,15,135,244,46,221,4,252,234,221,
  4,199,255,129,124,253,252,234,4,239,15,135,244,47,221,4,199,221,4,252,234,
  255,129,124,253,252,234,4,239,15,135,244,49,129,124,253,194,4,239,15,135,
  244,49,221,4,252,234,221,4,194,255,248,147,232,244,140,221,28,202,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,233,244,147,
  255,232,244,105,221,28,202,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,171,255,15,182,252,236,15,182,192,141,12,194,41,232,137,76,
  36,4,137,68,36,8,248,33,139,108,36,48,137,44,36,137,116,36,24,137,149,233,
  232,251,1,23,139,149,233,133,192,15,133,244,42,15,182,110,252,255,15,182,
  78,252,253,139,68,252,234,4,139,44,252,234,137,68,202,4,137,44,202,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,
  139,4,135,199,68,202,4,237,137,4,202,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,255,223,70,252,254,221,28,202,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,221,4,199,221,28,202,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,
  137,68,202,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,255,141,76,202,12,141,68,194,4,189,237,137,105,252,248,248,1,137,41,131,
  193,8,57,193,15,134,244,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,171,255,139,106,252,248,139,172,253,133,233,139,173,233,139,69,
  4,139,109,0,137,68,202,4,137,44,202,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,171,255,139,106,252,248,139,172,253,141,233,252,246,
  133,233,235,15,133,244,250,248,1,139,12,194,248,2,139,173,233,139,68,194,
  4,137,77,0,137,69,4,248,3,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,171,248,4,139,76,194,4,129,252,233,239,129,252,249,239,15,134,
  244,1,139,12,194,252,246,129,233,235,15,132,244,2,137,108,36,4,137,76,36,
  8,139,173,233,139,68,194,4,137,77,0,137,69,4,248,148,139,108,36,48,141,139,
  233,137,149,233,137,12,36,232,251,1,24,139,149,233,255,252,233,244,3,255,
  252,247,208,139,106,252,248,139,4,135,139,172,253,141,233,139,141,233,199,
  65,4,237,137,1,252,246,133,233,235,15,133,244,248,248,1,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,252,246,128,233,235,
  15,132,244,1,137,68,36,8,137,108,36,4,252,233,244,148,255,139,106,252,248,
  221,4,199,139,172,253,141,233,139,141,233,221,25,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,139,106,252,248,139,
  172,253,141,233,139,141,233,137,65,4,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,255,141,180,253,134,233,139,108,36,48,131,189,
  233,0,15,132,244,247,141,12,202,137,76,36,4,137,44,36,137,149,233,232,251,
  1,25,139,149,233,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,255,252,247,208,139,74,252,248,139,4,135,139,108,36,48,137,76,
  36,8,137,68,36,4,137,116,36,24,137,44,36,137,149,233,232,251,1,26,139,149,
  233,15,182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,171,255,137,197,37,252,255,7,0,0,193,
  252,237,11,61,252,255,7,0,0,15,148,209,137,108,36,8,1,200,139,108,36,48,1,
  200,137,68,36,4,137,116,36,24,139,139,233,137,44,36,59,139,233,137,149,233,
  15,131,244,248,248,1,232,251,1,27,139,149,233,15,182,78,252,253,137,4,202,
  199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,2,232,251,1,28,137,44,36,252,233,244,1,255,252,247,208,139,4,135,
  139,108,36,48,137,68,36,4,137,44,36,139,139,233,137,116,36,24,59,139,233,
  137,149,233,15,131,244,249,248,2,232,251,1,29,139,149,233,15,182,78,252,253,
  137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,171,248,3,232,251,1,28,137,44,36,252,233,244,2,255,252,247,
  208,139,106,252,248,139,173,233,139,4,135,252,233,244,149,255,252,247,208,
  139,106,252,248,139,173,233,139,4,135,252,233,244,150,255,15,182,252,236,
  15,182,192,129,124,253,252,234,4,239,15,133,244,36,139,44,252,234,129,124,
  253,194,4,239,15,135,244,251,221,4,194,219,20,36,219,4,36,255,139,4,36,15,
  133,244,36,59,133,233,15,131,244,36,193,224,3,3,133,233,129,120,253,4,239,
  15,132,244,248,248,1,139,40,139,64,4,137,44,202,137,68,202,4,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,131,189,233,0,15,
  132,244,1,139,141,233,252,246,129,233,235,15,132,244,36,15,182,78,252,253,
  252,233,244,1,248,5,129,124,253,194,4,239,255,15,133,244,36,139,4,194,252,
  233,244,149,255,15,182,252,236,15,182,192,252,247,208,139,4,135,129,124,253,
  252,234,4,239,15,133,244,34,139,44,252,234,248,149,139,141,233,35,136,233,
  105,201,239,3,141,233,248,1,129,185,233,239,15,133,244,250,57,129,233,15,
  133,244,250,129,121,253,4,239,15,132,244,251,15,182,70,252,253,139,41,139,
  73,4,137,44,194,248,2,137,76,194,4,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,171,248,3,15,182,70,252,253,185,237,252,233,244,2,248,
  4,255,139,137,233,133,201,15,133,244,1,248,5,139,141,233,133,201,15,132,244,
  3,252,246,129,233,235,15,133,244,3,252,233,244,34,255,15,182,252,236,15,182,
  192,129,124,253,252,234,4,239,15,133,244,35,139,44,252,234,59,133,233,15,
  131,244,35,193,224,3,3,133,233,129,120,253,4,239,15,132,244,248,248,1,139,
  40,139,64,4,137,44,202,137,68,202,4,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,171,248,2,131,189,233,0,15,132,244,1,139,141,233,252,
  246,129,233,235,15,132,244,35,15,182,78,252,253,252,233,244,1,255,15,182,
  252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,39,139,44,252,234,
  129,124,253,194,4,239,15,135,244,251,221,4,194,219,20,36,219,4,36,255,139,
  4,36,15,133,244,39,59,133,233,15,131,244,39,193,224,3,3,133,233,129,120,253,
  4,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,139,108,
  202,4,139,12,202,137,104,4,137,8,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,171,248,3,131,189,233,0,15,132,244,1,139,141,233,252,246,
  129,233,235,15,132,244,39,255,15,182,78,252,253,252,233,244,1,248,5,129,124,
  253,194,4,239,15,133,244,39,139,4,194,252,233,244,150,248,7,128,165,233,235,
  139,139,233,137,171,233,137,141,233,15,182,78,252,253,252,233,244,2,255,15,
  182,252,236,15,182,192,252,247,208,139,4,135,129,124,253,252,234,4,239,15,
  133,244,37,139,44,252,234,248,150,139,141,233,35,136,233,105,201,239,198,
  133,233,0,3,141,233,248,1,129,185,233,239,15,133,244,251,57,129,233,15,133,
  244,251,129,121,253,4,239,15,132,244,250,248,2,252,246,133,233,235,255,15,
  133,244,253,248,3,15,182,70,252,253,139,108,194,4,139,4,194,137,105,4,137,
  1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,4,131,
  189,233,0,15,132,244,2,137,12,36,139,141,233,252,246,129,233,235,15,132,244,
  37,139,12,36,252,233,244,2,248,5,139,137,233,133,201,15,133,244,1,139,141,
  233,133,201,15,132,244,252,252,246,129,233,235,255,15,132,244,37,248,6,137,
  68,36,16,199,68,36,20,237,141,68,36,16,137,108,36,12,137,108,36,4,139,108,
  36,48,137,68,36,8,137,44,36,137,116,36,24,137,149,233,232,251,1,30,139,149,
  233,139,108,36,12,137,193,252,233,244,2,248,7,128,165,233,235,139,131,233,
  137,171,233,137,133,233,252,233,244,3,255,15,182,252,236,15,182,192,129,124,
  253,252,234,4,239,15,133,244,38,139,44,252,234,59,133,233,15,131,244,38,193,
  224,3,3,133,233,129,120,253,4,239,15,132,244,249,248,1,252,246,133,233,235,
  15,133,244,253,248,2,139,108,202,4,139,12,202,137,104,4,137,8,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,3,131,189,233,0,15,
  132,244,1,139,141,233,252,246,129,233,235,255,15,132,244,38,15,182,78,252,
  253,252,233,244,1,248,7,128,165,233,235,139,139,233,137,171,233,137,141,233,
  15,182,78,252,253,252,233,244,2,255,137,124,36,16,221,4,199,219,92,36,12,
  248,1,141,12,202,139,105,252,248,252,246,133,233,235,15,133,244,253,248,2,
  139,68,36,20,139,124,36,12,131,232,1,15,132,244,250,1,252,248,59,133,233,
  15,131,244,251,41,252,248,193,231,3,3,189,233,248,3,139,41,137,47,139,105,
  4,131,193,8,137,111,4,131,199,8,131,232,1,15,133,244,3,248,4,139,124,36,16,
  139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,5,137,
  108,36,4,139,108,36,48,137,68,36,8,137,44,36,137,116,36,24,137,149,233,232,
  251,1,31,139,149,233,15,182,78,252,253,252,233,244,1,248,7,128,165,233,235,
  255,139,131,233,137,171,233,137,133,233,252,233,244,2,255,3,68,36,20,255,
  141,76,202,8,139,105,252,248,129,121,253,252,252,239,15,133,244,29,252,255,
  165,233,255,141,76,202,8,137,215,139,105,252,248,129,121,253,252,252,239,
  15,133,244,29,248,51,139,114,252,252,252,247,198,237,15,133,244,253,248,1,
  137,106,252,248,137,68,36,20,131,232,1,15,132,244,249,248,2,139,41,137,47,
  139,105,4,137,111,4,131,199,8,131,193,8,131,232,1,15,133,244,2,139,106,252,
  248,248,3,137,209,128,189,233,1,15,135,244,251,248,4,139,68,36,20,252,255,
  165,233,248,5,252,247,198,237,15,133,244,4,255,15,182,70,252,253,252,247,
  208,141,20,194,139,122,252,248,139,191,233,139,191,233,252,233,244,4,248,
  7,15,139,244,1,131,230,252,248,41,252,242,137,215,139,114,252,252,252,233,
  244,1,255,141,76,202,8,139,105,232,139,65,252,236,137,41,137,65,4,139,105,
  252,240,139,65,252,244,137,105,8,137,65,12,139,105,224,139,65,228,137,105,
  252,248,137,65,252,252,129,252,248,239,184,3,0,0,0,15,133,244,29,252,255,
  165,233,255,15,182,252,236,139,66,252,248,141,12,202,139,128,233,15,182,128,
  233,137,124,36,8,141,188,253,194,233,43,122,252,252,133,252,237,15,132,244,
  251,141,108,252,233,252,248,57,215,15,131,244,248,248,1,139,71,252,248,137,
  1,139,71,252,252,131,199,8,137,65,4,131,193,8,57,252,233,15,131,244,249,57,
  215,15,130,244,1,248,2,199,65,4,237,131,193,8,57,252,233,15,130,244,2,248,
  3,139,124,36,8,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,248,5,199,68,36,20,1,0,0,0,137,208,41,252,248,15,134,244,3,137,197,193,
  252,237,3,137,108,36,4,131,197,1,137,108,36,20,139,108,36,48,1,200,59,133,
  233,15,135,244,253,248,6,255,139,71,252,248,137,1,139,71,252,252,131,199,
  8,137,65,4,131,193,8,57,215,15,130,244,6,252,233,244,3,248,7,137,149,233,
  137,141,233,137,116,36,24,41,215,137,44,36,232,251,1,0,139,149,233,139,141,
  233,1,215,252,233,244,6,255,193,225,3,255,248,1,139,114,252,252,137,68,36,
  20,252,247,198,237,15,133,244,253,255,248,17,137,215,131,232,1,15,132,244,
  249,248,2,139,44,15,137,111,252,248,139,108,15,4,137,111,252,252,131,199,
  8,131,232,1,15,133,244,2,248,3,139,68,36,20,15,182,110,252,255,248,5,57,197,
  15,135,244,252,255,139,108,10,4,137,106,252,252,139,44,10,137,106,252,248,
  255,248,5,56,70,252,255,15,135,244,252,255,15,182,78,252,253,252,247,209,
  141,20,202,139,122,252,248,139,191,233,139,191,233,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,171,248,6,255,199,71,252,252,237,131,
  199,8,255,199,68,194,252,244,237,255,131,192,1,252,233,244,5,248,7,15,139,
  244,18,131,230,252,248,41,252,242,255,1,252,241,255,137,252,245,209,252,237,
  129,229,239,102,131,172,253,43,233,1,15,132,244,136,255,141,12,202,255,129,
  121,253,4,239,15,135,244,52,129,121,253,12,239,15,135,244,52,255,139,105,
  20,255,129,252,253,239,15,135,244,52,255,221,65,8,221,1,255,220,65,16,221,
  17,255,221,81,24,133,252,237,15,136,244,247,217,201,248,1,255,15,183,70,252,
  254,255,15,131,244,248,141,180,253,134,233,255,141,180,253,134,233,15,183,
  70,252,254,15,131,245,255,15,130,244,248,141,180,253,134,233,255,141,12,202,
  139,105,4,129,252,253,239,15,132,244,247,255,137,105,252,252,139,41,137,105,
  252,248,252,233,245,255,141,180,253,134,233,139,1,137,105,252,252,137,65,
  252,248,255,139,139,233,139,4,129,139,128,233,139,108,36,48,137,147,233,137,
  171,233,252,255,224,255,141,180,253,134,233,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,171,255,254,0
};

enum {
  GLOB_gate_lf,
  GLOB_gate_lf_growstack,
  GLOB_gate_lv,
  GLOB_gate_lv_growstack,
  GLOB_gate_cwrap,
  GLOB_gate_c_growstack,
  GLOB_vm_returnc,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_gate_c,
  GLOB_vm_returnp,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_ff,
  GLOB_cont_dispatch,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vmeta_call,
  GLOB_vm_cpcall,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resn,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_vm_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_atan2,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc,
  GLOB_ff_math_fmod,
  GLOB_ff_math_pow,
  GLOB_vm_pow,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_fff_fallback_2,
  GLOB_ff_string_reverse,
  GLOB_fff_fallback_1,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_band,
  GLOB_fff_resbit,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_hook,
  GLOB_vm_hotloop,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_mod,
  GLOB_vm_exp2,
  GLOB_vm_exp2raw,
  GLOB_vm_powi,
  GLOB_vm_foldfpm,
  GLOB_vm_foldarith,
  GLOB_vm_cpuid,
  GLOB_BC_MODVN_Z,
  GLOB_BC_USETV_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "gate_lf",
  "gate_lf_growstack",
  "gate_lv",
  "gate_lv_growstack",
  "gate_cwrap",
  "gate_c_growstack",
  "vm_returnc",
  "BC_RET_Z",
  "vm_return",
  "gate_c",
  "vm_returnp",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c",
  "vm_unwind_ff",
  "cont_dispatch",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vmeta_call",
  "vm_cpcall",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_arith_vn",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resn",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_sqrt",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "vm_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_atan2",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc",
  "ff_math_fmod",
  "ff_math_pow",
  "vm_pow",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "fff_fallback_2",
  "ff_string_reverse",
  "fff_fallback_1",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_tobit",
  "ff_bit_band",
  "fff_resbit",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_hook",
  "vm_hotloop",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_mod",
  "vm_exp2",
  "vm_exp2raw",
  "vm_powi",
  "vm_foldfpm",
  "vm_foldarith",
  "vm_cpuid",
  "BC_MODVN_Z",
  "BC_USETV_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack",
  "lj_meta_tget",
  "lj_meta_tset",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_arith",
  "lj_meta_len",
  "lj_meta_call",
  "lj_meta_for",
  "lj_tab_get",
  "lj_str_fromnum",
  "lj_tab_next",
  "lj_tab_getinth",
  "lj_ffh_coroutine_wrap_err",
  "lj_wrapper_sinh",
  "lj_wrapper_cosh",
  "lj_wrapper_tanh",
  "lj_str_new",
  "lj_tab_len",
  "lj_gc_step",
  "lj_dispatch_ins",
  "lj_trace_hot",
  "lj_trace_exit",
  "lj_meta_cat",
  "lj_gc_barrieruv",
  "lj_func_closeuv",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop",
  "lj_tab_dup",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((Trace *)0)_V)
#define DtE(_V) (int)(ptrdiff_t)&(((ExitInfo *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx, int cmov)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, Dt7(->pt), Dt9(->framesize), Dt9(->bc), Dt9(->k), Dt1(->maxstack), LJ_TNIL);
#if LJ_HASJIT
#endif
  dasm_put(Dst, 63, FRAME_VARG, -FRAME_VARG, Dt7(->pt), Dt9(->framesize), Dt1(->maxstack), Dt9(->numparams), LJ_TNIL, Dt9(->framesize), Dt9(->bc), Dt9(->k));
  dasm_put(Dst, 203, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), DISPATCH_GL(vmstate), ~LJ_VMST_C, DISPATCH_GL(wrapf), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), FRAME_TYPE, Dt8(->f), Dt1(->base));
  dasm_put(Dst, 309, 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), DISPATCH_GL(vmstate), ~LJ_VMST_C, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), FRAME_TYPE, FRAME_C, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 398, Dt1(->base), Dt1(->top), Dt1(->cframe), Dt1(->maxstack), LJ_TNIL);
  dasm_put(Dst, 511, Dt1(->top), Dt1(->top), CFRAME_RAWMASK, Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE);
  dasm_put(Dst, 628, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, FRAME_P, LJ_TTRUE, LUA_MINSTACK, Dt9(->bc), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 743, Dt7(->gate), FRAME_C, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE, FRAME_CP);
  dasm_put(Dst, 872, FRAME_C, Dt1(->cframe), Dt1(->cframe), Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), LJ_TFUNC, Dt7(->gate), Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe));
  dasm_put(Dst, 1035, FRAME_CP, LJ_TNIL, Dt7(->pt), Dt9(->k), LJ_TSTR, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB);
  dasm_put(Dst, 1203, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, Dt7(->gate), LJ_TSTR, BC_GSET, DISPATCH_GL(tmptv), LJ_TTAB);
  dasm_put(Dst, 1392, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, Dt7(->gate), Dt1(->base), Dt1(->base), -BCBIAS_J*4);
  dasm_put(Dst, 1610, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base));
  dasm_put(Dst, 1734, Dt1(->base), Dt1(->base), FRAME_CONT, LJ_TFUNC, Dt7(->gate), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt7(->gate));
  dasm_put(Dst, 1940, Dt1(->base), Dt1(->base), GG_DISP_STATIC*4, 1+1, LJ_TISTRUECOND, 1+1, ~LJ_TNUMX);
  dasm_put(Dst, 2083);
  if (cmov) {
  dasm_put(Dst, 2089);
  } else {
  dasm_put(Dst, 2093);
  }
  dasm_put(Dst, 2102, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, 1+1, LJ_TTAB, Dt6(->metatable), LJ_TNIL, DISPATCH_GL(mmname)+4*MM_metatable, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node));
  dasm_put(Dst, 2200, DtB(->key.it), LJ_TSTR, DtB(->key.gcr), DtB(->next), LJ_TNIL, LJ_TUDATA);
  dasm_put(Dst, 2271, LJ_TISNUM, LJ_TNUMX, DISPATCH_GL(basemt), 2+1, LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), LJ_TTAB);
  dasm_put(Dst, 2345, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist), 2+1, LJ_TTAB, 1+1);
  dasm_put(Dst, 2457, LJ_TISNUM, 1+1, LJ_TSTR, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(basemt)+4*(~LJ_TNUMX));
  dasm_put(Dst, 2528, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), 1+1, LJ_TTAB);
  dasm_put(Dst, 2614, Dt1(->base), Dt1(->base), 1+2, LJ_TNIL, LJ_TNIL, 1+1, LJ_TTAB);
  dasm_put(Dst, 2740, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 1+1, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL);
  dasm_put(Dst, 2836, Dt6(->hmask), 1+0, 1+1, LJ_TTAB, Dt8(->upvalue[0]), LJ_TFUNC, 1+3);
  dasm_put(Dst, 2940, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE, LJ_TFUNC, Dt7(->gate), 2+1, LJ_TFUNC);
  dasm_put(Dst, 3022, LJ_TFUNC, 2*8+FRAME_PCALL, 2*8, 1+1, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top));
  dasm_put(Dst, 3122, Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base));
  dasm_put(Dst, 3243, LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), LJ_TTRUE, FRAME_TYPE);
  dasm_put(Dst, 3357, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe), Dt1(->status), LUA_YIELD);
  dasm_put(Dst, 3457, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 3569, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), FRAME_TYPE);
  dasm_put(Dst, 3681, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_CANYIELD, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status), 1+1, LJ_TISNUM);
  dasm_put(Dst, 3782, 1+1, FRAME_TYPE, LJ_TNIL, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3888, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3949, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4031, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4097, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4186, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4295, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4401, Dt8(->upvalue[0]), 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM);
  dasm_put(Dst, 4474, LJ_TISNUM, 1+1, LJ_TISNUM, 1+2);
  dasm_put(Dst, 4614, 1+1, LJ_TISNUM, 1+2);
  dasm_put(Dst, 4732, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1);
  dasm_put(Dst, 4819, LJ_TISNUM, LJ_TISNUM, 1+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4896);
  if (cmov) {
  dasm_put(Dst, 4903);
  } else {
  dasm_put(Dst, 4911);
  }
  dasm_put(Dst, 4932, 1+1, LJ_TISNUM, LJ_TISNUM);
  if (cmov) {
  dasm_put(Dst, 4992);
  } else {
  dasm_put(Dst, 5000);
  }
  dasm_put(Dst, 5021, 1+1, LJ_TSTR, Dt5(->len), 1+1, LJ_TSTR, Dt5(->len));
  dasm_put(Dst, 5090, Dt5([1]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM, Dt1(->base));
  dasm_put(Dst, 5198, Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2, LJ_TISNUM, LJ_TSTR);
  dasm_put(Dst, 5295, LJ_TISNUM, Dt5(->len), sizeof(GCstr)-1);
  dasm_put(Dst, 5401, 2+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR);
  dasm_put(Dst, 5473, LJ_TISNUM, Dt5(->len), DISPATCH_GL(tmpbuf.sz), Dt5([1]), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 5565, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5659, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5745, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len));
  dasm_put(Dst, 5823, DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), 1+1, LJ_TTAB);
  dasm_put(Dst, 5917, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 6053, LJ_TISNUM, 1+1, LJ_TISNUM, LJ_TISNUM, 1+1);
  dasm_put(Dst, 6176, LJ_TISNUM, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 6306, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1);
  dasm_put(Dst, 6440, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6585, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6732, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base), Dt1(->top), Dt7(->gate), LJ_TFUNC);
  dasm_put(Dst, 6847, Dt7(->gate), Dt1(->base), LUA_MINSTACK, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 6965, DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
#endif
  dasm_put(Dst, 6996, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base), Dt1(->base), GG_DISP_STATIC*4);
#if LJ_HASJIT
  dasm_put(Dst, 7087, GG_DISP2J, DISPATCH_J(L), Dt1(->base));
#endif
  dasm_put(Dst, 7120);
#if LJ_HASJIT
  dasm_put(Dst, 7123, GG_DISP2J, DISPATCH_J(L), Dt1(->base), Dt1(->base));
#endif
  dasm_put(Dst, 7173);
#if LJ_HASJIT
  dasm_put(Dst, 7176, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 8*8+16, DISPATCH_J(flags), JIT_F_SSE2, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_J(L), Dt1(->base), GG_DISP2J, Dt1(->base));
#endif
  dasm_put(Dst, 7326);
#if LJ_HASJIT
  dasm_put(Dst, 7329, Dt7(->pt), Dt9(->k), DISPATCH_GL(jit_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
#endif
  dasm_put(Dst, 7369);
  if (cmov) {
  dasm_put(Dst, 7633);
  } else {
  dasm_put(Dst, 7637);
  }
  dasm_put(Dst, 7646);
  dasm_put(Dst, 7723);
  if (cmov) {
  dasm_put(Dst, 7829);
  } else {
  dasm_put(Dst, 7833);
  }
  dasm_put(Dst, 7842);
  if (cmov) {
  dasm_put(Dst, 7633);
  } else {
  dasm_put(Dst, 7860);
  }
  dasm_put(Dst, 7867);
  dasm_put(Dst, 7996);
  dasm_put(Dst, 8112);
  dasm_put(Dst, 8201);
  if (cmov) {
  dasm_put(Dst, 8230);
  } else {
  dasm_put(Dst, 8249);
  }
  dasm_put(Dst, 8290);
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop, int cmov)
{
  int vk = 0;
  dasm_put(Dst, 8347, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */

  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 8349, LJ_TISNUM, LJ_TISNUM);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
    switch (op) {
    case BC_ISLT:
      dasm_put(Dst, 8392);
      break;
    case BC_ISGE:
      dasm_put(Dst, 8196);
      break;
    case BC_ISLE:
      dasm_put(Dst, 5740);
      break;
    case BC_ISGT:
      dasm_put(Dst, 8397);
      break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 8402, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 8435, LJ_TISNUM, LJ_TISNUM);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 8467);
    } else {
      dasm_put(Dst, 8476);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 8485, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 8500, -BCBIAS_J*4);
    }
    dasm_put(Dst, 7154);
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 8515, LJ_TISPRI, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 8573);
      } else {
	dasm_put(Dst, 8577);
      }
      dasm_put(Dst, 8583);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 8588, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 8471);
    } else {
      dasm_put(Dst, 8107);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 8611, LJ_TISNUM);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 8631);
    goto iseqne_test;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 8642, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 8654);
    } else {
      dasm_put(Dst, 8659);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 8664);
    }
    dasm_put(Dst, 8675, -BCBIAS_J*4);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 8706);
    break;
  case BC_NOT:
    dasm_put(Dst, 8739, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    dasm_put(Dst, 8774, LJ_TISNUM);
    break;
  case BC_LEN:
    dasm_put(Dst, 8811, LJ_TSTR, Dt5(->len), LJ_TTAB);
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 8901, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 8920, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 8939, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 8789);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 8968, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 8987, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9006, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 8789);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9035, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9054, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9073, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 8789);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9102, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9121, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9140, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 8789);
    break;
  case BC_MODVN:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9169, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9188, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9207, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9236);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9169, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9188, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9207, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9263);
    break;
  case BC_POW:
    dasm_put(Dst, 8893);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9169, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9188, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9207, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9268);
    break;

  case BC_CAT:
    dasm_put(Dst, 9293, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 9387, LJ_TSTR);
    break;
  case BC_KSHORT:
    dasm_put(Dst, 9420);
    break;
  case BC_KNUM:
    dasm_put(Dst, 9446);
    break;
  case BC_KPRI:
    dasm_put(Dst, 9471);
    break;
  case BC_KNIL:
    dasm_put(Dst, 9497, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 9543, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
    dasm_put(Dst, 9587, offsetof(GCfuncL, uvptr), DtA(->marked), LJ_GC_BLACK, DtA(->v), LJ_TISGCV, LJ_TISNUM - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->v), GG_DISP2G, Dt1(->base), Dt1(->base));
    dasm_put(Dst, 9719);
    break;
  case BC_USETS:
    dasm_put(Dst, 9724, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES);
    break;
  case BC_USETN:
    dasm_put(Dst, 9801, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETP:
    dasm_put(Dst, 9837, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 9874, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 9932, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 10003, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 10114, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 10202, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 10220, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 10238, LJ_TTAB, LJ_TISNUM);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
    dasm_put(Dst, 10280, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TSTR);
    dasm_put(Dst, 10381);
    break;
  case BC_TGETS:
    dasm_put(Dst, 10393, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL, LJ_TNIL);
    dasm_put(Dst, 10514, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 10548, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;

  case BC_TSETV:
    dasm_put(Dst, 10656, LJ_TTAB, LJ_TISNUM);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
    dasm_put(Dst, 10698, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
    dasm_put(Dst, 10793, LJ_TSTR, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 10846, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK);
    dasm_put(Dst, 10926, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
    dasm_put(Dst, 11025, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 11107, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
    dasm_put(Dst, 11213, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 11251, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base), Dt6(->marked), cast_byte(~LJ_GC_BLACK));
    dasm_put(Dst, 11412, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 8897);
    if (op == BC_CALLM) {
      dasm_put(Dst, 11426);
    }
    dasm_put(Dst, 11431, LJ_TFUNC, Dt7(->gate));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 11426);
    break;
  case BC_CALLT:
    dasm_put(Dst, 11454, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->gate), FRAME_TYPE);
    dasm_put(Dst, 11567, Dt7(->pt), Dt9(->k));
    break;

  case BC_ITERC:
    dasm_put(Dst, 11616, LJ_TFUNC, Dt7(->gate));
    break;

  case BC_VARG:
    dasm_put(Dst, 11678, Dt7(->pt), Dt9(->numparams), (8+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 11854, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 11426);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 11917);
    }
    dasm_put(Dst, 11921, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 11940);
      break;
    case BC_RET1:
      dasm_put(Dst, 11998);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 12014);
    default:
      break;
    }
    dasm_put(Dst, 12025, Dt7(->pt), Dt9(->k));
    if (op == BC_RET) {
      dasm_put(Dst, 12067, LJ_TNIL);
    } else {
      dasm_put(Dst, 12076, LJ_TNIL);
    }
    dasm_put(Dst, 12083);
    if (op != BC_RET0) {
      dasm_put(Dst, 12104);
    }
    dasm_put(Dst, 8888);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
#if LJ_HASJIT
    dasm_put(Dst, 12108, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 12129);
    if (!vk) {
      dasm_put(Dst, 12133, LJ_TISNUM, LJ_TISNUM);
    }
    dasm_put(Dst, 12152);
    if (!vk) {
      dasm_put(Dst, 12156, LJ_TISNUM);
    }
    dasm_put(Dst, 12165);
    if (vk) {
      dasm_put(Dst, 12171);
    }
    dasm_put(Dst, 12177);
    if (cmov) {
    dasm_put(Dst, 8379);
    } else {
    dasm_put(Dst, 8385);
    }
    if (!cmov) {
      dasm_put(Dst, 12192);
    }
    if (op == BC_FORI) {
      dasm_put(Dst, 12198, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 12208, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 12222, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 12218, BC_JLOOP);
    }
    dasm_put(Dst, 8414);
    break;

  case BC_ITERL:
#if LJ_HASJIT
    dasm_put(Dst, 12108, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 12232, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 12247, BC_JLOOP);
    } else {
      dasm_put(Dst, 12261, -BCBIAS_J*4);
    }
    dasm_put(Dst, 8685);
    break;

  case BC_LOOP:
#if LJ_HASJIT
    dasm_put(Dst, 12108, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_ILOOP:
    dasm_put(Dst, 7154);
    break;

  case BC_JLOOP:
#if LJ_HASJIT
    dasm_put(Dst, 12277, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L));
#endif
    break;

  case BC_JMP:
    dasm_put(Dst, 12300, -BCBIAS_J*4);
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  int cmov = 1;
#ifdef LUAJIT_CPU_NOCMOV
  cmov = 0;
#endif

  dasm_growpc(Dst, BC__MAX);

  build_subroutines(ctx, cmov);

  dasm_put(Dst, 12324);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op, cmov);

  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 0x8\n"
	"\t.byte 0xc\n\t.uleb128 0x4\n\t.uleb128 0x4\n"
	"\t.byte 0x88\n\t.uleb128 0x1\n"
	"\t.align 4\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 0x30\n"	/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
	"\t.align 4\n"
	".LEFDE0:\n\n", (int)ctx->codesz);
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 0x8\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 0x4\n\t.uleb128 0x4\n"
	"\t.byte 0x88\n\t.uleb128 0x1\n"
	"\t.align 4\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .LASFDE1-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 0x30\n"	/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
	"\t.align 4\n"
	".LEFDE1:\n\n", (int)ctx->codesz);
    break;
  case BUILD_machasm:
    /* NYI: OSX ignores it. Something must be missing. */
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$0,LECIE1-LSCIE1\n"
	"\t.long L$set$0\n"
	"LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-4\n"
	"\t.byte 0x8\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
	"\t.byte 0x88\n\t.byte 0x1\n"
	"\t.align 2\n"
	"LECIE1:\n\n");
    fprintf(ctx->fp,
	"_lj_vm_asm_begin.eh:\n"
	"LSFDE1:\n"
	"\t.set L$set$1,LEFDE1-LASFDE1\n"
	"\t.long L$set$1\n"
	"LASFDE1:\n"
	"\t.long LASFDE1-EH_frame1\n"
	"\t.long _lj_vm_asm_begin-.\n"
	"\t.long %d\n"
	"\t.byte 0\n"				/* augmentation length */
	"\t.byte 0xe\n\t.byte 0x30\n"		/* def_cfa_offset */
	"\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	"\t.byte 0x87\n\t.byte 0x3\n"		/* offset edi */
	"\t.byte 0x86\n\t.byte 0x4\n"		/* offset esi */
	"\t.byte 0x83\n\t.byte 0x5\n"		/* offset ebx */
	"\t.align 2\n"
	"LEFDE1:\n\n", (int)ctx->codesz);
      fprintf(ctx->fp,
	"\t.non_lazy_symbol_pointer\n"
	"L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
	".indirect_symbol _lj_err_unwind_dwarf\n"
	".long 0\n");
    break;
  default:  /* Difficult for other modes. */
    break;
  }
}

